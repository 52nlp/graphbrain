; English

(wv ("with" "a" a "," b verb:V c)
     ((filter-max (len verb))
     (let x (:wv a))
     (let y (:wv b))
     (let z (:wv (+ b verb c)))
     (let k (build (rel-vert "has") y x)))
  (flatten (build (rel-vert "+list") k z)))

(wv (a verb1:V b "and" verb2:V c)
     ((let x (:wv (+ a verb1 b)))
     (let y (:wv (+ a verb2 c))))
  (flatten (build (rel-vert "+list") x y)))

(wv (a verb:V b in1:IN c "and" d in2:IN e)
     ((! (ends-with (+ in1 c) (+ in2 e)))
     (let x (:wv (+ a verb b in1 c)))
     (let y (:wv (+ a verb d in2 e))))
  (flatten (build (rel-vert "+list") x y)))

(wv (a verb:V b "and" c in:IN d)
     ((let x (:wv (+ a verb b in d)))
     (let y (:wv (+ a verb c in d))))
  (flatten (build (rel-vert "+list") x y)))

(wv (a verb:V b "and" c)
     ((let x (:wv (+ a verb b)))
     (let y (:wv (+ a verb c))))
  (flatten (build (rel-vert "+list") x y)))

(wv (a verb:V b)
    ((filter-max (len verb))
    (let orig (:wv a))
    (let rel (rel-vert verb))
    (let targ (:wv b)))
  (build rel orig targ))

(wv (a:-V "of" b:-V)
    ((filter-min (pos b))
    (let x (:wv a))
    (let y (:wv b)))
  (build (rel-vert "+of") x y))

(wv (a "'s" b)
    ((let x (:wv a))
    (let y (:wv b)))
  (build (rel-vert "+poss") x y))

(wv (a "in" b)
    ((let x (:wv a))
    (let y (:wv b)))
  (build (rel-vert "+in") x y))

(wv (prop:JJ|RB obj:-JJ|-RB)
    ((filter-max (len prop)) 
    (let x (:wv prop))
    (let y (:wv obj)))
  (build (rel-vert "+prop") y x))

(wv ("the" no-the:-V)
    ((let r (:wv no-the)))
  r)

(wv (obj:-V)
    ((let r (txt-vert obj)))
  r)